0-1 Knapsack
Given weights and values of n items, put these items in a knapsack of 
capacity W to get the maximum total value in the knapsack. 
In other words, given two integer arrays val[0..n-1] and wt[0..n-1] 
which represent values and weights associated with n items respectively.
Also given an integer W which represents knapsack capacity, find out the maximum 
value subset of val[] such that sum of the weights of this subset is smaller than 
or equal to W. You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).


import java.util.*;
public class Knapsack_0_1 {
public static void main(String args[])
{
	Scanner sc=new Scanner(System.in);
	int n=sc.nextInt();
	int wt[]=new int[n];
	int val[]=new int[n];
	for(int i=0;i<n;i++)
		wt[i]=sc.nextInt();
	for(int i=0;i<n;i++)
		val[i]=sc.nextInt();
	
	int W=sc.nextInt();
	int ans=Max_Profit(W,wt,val,n);
	System.out.println(ans);
}
static int Max_Profit(int W, int wt[], int val[], int n) 
{ 
     int i, w; 
 int K[][] = new int[n+1][W+1]; 
   
 
 for (i = 0; i <= n; i++) 
 { 
     for (w = 0; w <= W; w++) 
     { 
         if (i==0 || w==0) 
              K[i][w] = 0; 
         else if (wt[i-1] <= w) 
               K[i][w] = Math.max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]); 
         else
               K[i][w] = K[i-1][w]; 
     } 
  } 
   
  return K[n][W]; 
} 
